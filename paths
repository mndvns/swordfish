var express, stylus, routes, api, mongoose, app;
express = require('express');
stylus = require('stylus');
routes = require('./routes');
api = require('./routes/api');
mongoose = require('./config/mongoose');
app = module.exports = express();
app.configure(function(){
  app.set("views", __dirname + "/views");
  app.set("view engine", "jade");
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express['static'](__dirname + "/public"));
  return app.use(app.router);
});
app.configure("development", function(){
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});
app.configure("production", function(){
  app.use(express.errorHandler());
});
app.get("/", routes.index);
app.get("/partials/:name", routes.partials);
app.get("/api/name", api.name);
app.get("*", routes.index);
app.listen(3000, function(){
  console.log("Express server listening on port %d in %s mode", this.address().port, app.settings.env);
});
angular.module('myApp', ['myApp.filters', 'myApp.services', 'myApp.directives']).config([
  '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider){
    $routeProvider.when('/view1', {
      templateUrl: 'partials/partial1',
      controller: MyCtrl1
    });
    $routeProvider.when('/view2', {
      templateUrl: 'partials/partial2',
      controller: MyCtrl2
    });
    $routeProvider.otherwise({
      redirectTo: '/view1'
    });
    return $locationProvider.html5Mode(true);
  }
]);
angular.module("myApp.directives", []).directive("appVersion", [
  "version", function(version){
    return function(scope, elm, attrs){
      return elm.text(version);
    };
  }
]);
angular.module("myApp.filters", []).filter("interpolate", [
  "version", function(version){
    return function(text){
      return String(text).replace(/\%VERSION\%/g, version);
    };
  }
]);
var AppCtrl, Ctrl, MyCtrl1, MyCtrl2;
AppCtrl = function($scope, $http){
  return $http({
    method: 'GET',
    url: '/api/name'
  }).success(function(data, status, headers, config){
    return $scope.name = data.name;
  }).error(function(data, status, headers, config){
    return $scope.name = 'Error!';
  });
};
Ctrl = function($scope){
  return $scope.userType = 'guest';
};
MyCtrl1 = function(){};
MyCtrl1.$inject = [];
MyCtrl2 = function(){};
MyCtrl2.$inject = [];
var myApp, OfferCtrl;
myApp = angular.module('myApp', []);
myApp.factory("Data", function(){
  return {
    message: "i'm totally a fucking factory, dude"
  };
});
myApp.filter("reverse", function(){
  return function(text){
    return text.split('').reverse().join('');
  };
});
OfferCtrl = function($scope, Data){
  return $scope.data = {
    message: 'qweqweq'
  };
};
var mongoose, offerSchema, Offer, offer;
mongoose = require('mongoose');
offerSchema = mongoose.Schema({
  title: {
    type: 'string'
  },
  description: {
    type: 'string'
  },
  price: {
    type: 'number'
  }
});
Offer = mongoose.model("Offer", offerSchema);
offer = module.exports = new Offer({
  title: "Some offer",
  description: "This is a description",
  price: 20
});
offer.save();
angular.module('myApp.services', []).value('version', '0.1');
var mongoose, x$, db;
mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/swordfish');
x$ = db = mongoose.connection;
x$.on('error', console.error.bind(console, 'connection error:'));
x$.once('open', function(it){
  return console.log("YAY!", it);
});
exports.name = function(req, res){
  return res.json({
    name: 'Bob'
  });
};
exports.index = function(req, res){
  return res.render('index');
};
exports.partials = function(req, res){
  var name;
  name = req.params.name;
  return res.render('partials/' + name);
};